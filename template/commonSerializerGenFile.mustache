#pragma once
{{#include_headfiles}}
#include "{{headfile_name}}"
{{/include_headfiles}}

NS_JYE_BEGIN

using namespace Math;

{{#class_defines}}
template<>
inline void Serializer::Register(const {{class_name}}& instance){
    {{#class_field_defines}}{{#class_field_is_vector}}
    for (auto& item : instance.{{class_field_name}}){
        Serializer::Register(item);
    }{{/class_field_is_vector}}{{#class_field_is_map}}
    for (auto& item : instance.{{class_field_name}}){
        Serializer::Register(item.first);
        Serializer::Register(item.second);
    }{{/class_field_is_map}}
    {{^class_field_is_vector}}{{^class_field_is_map}}Serializer::Register(instance.{{class_field_name}});{{/class_field_is_map}}{{/class_field_is_vector}}{{/class_field_defines}}
}

template<>
inline Json Serializer::write(const {{class_name}}& instance){
    Json::object  ret_context;
    {{#class_base_class_defines}}auto&&  json_context_{{class_base_class_index}} = Serializer::write(*({{class_base_class_name}}*)&instance);
    assert(json_context_{{class_base_class_index}}.is_object());
    auto&& json_context_map_{{class_base_class_index}} = json_context_{{class_base_class_index}}.object_items();
    ret_context.insert(json_context_map_{{class_base_class_index}}.begin() , json_context_map_{{class_base_class_index}}.end());{{/class_base_class_defines}}
    {{#class_field_defines}}{{#class_field_is_vector}}Json::array {{class_field_name}}_json;
    for (auto& item : instance.{{class_field_name}}){
        {{class_field_name}}_json.emplace_back(Serializer::write(item));
    }
    ret_context.insert_or_assign("{{class_field_display_name}}",{{class_field_name}}_json);{{/class_field_is_vector}}
    {{#class_field_is_map}}Json::array {{class_field_name}}_json;
    for (auto& item : instance.{{class_field_name}}){
        {{class_field_name}}_json.emplace_back(Serializer::write(item.first));
        {{class_field_name}}_json.emplace_back(Serializer::write(item.second));
    }
    ret_context.insert_or_assign("{{class_field_display_name}}",{{class_field_name}}_json);{{/class_field_is_map}}
    {{^class_field_is_vector}}{{^class_field_is_map}}ret_context.insert_or_assign("{{class_field_display_name}}", Serializer::write(instance.{{class_field_name}}));{{/class_field_is_map}}{{/class_field_is_vector}}
    {{/class_field_defines}}

    return  Json(ret_context);
}
template<>
inline {{class_name}}& Serializer::read(const Json& json_context, {{class_name}}& instance){
    assert(json_context.is_object());
    {{#class_base_class_defines}}Serializer::read(json_context,*({{class_base_class_name}}*)&instance);{{/class_base_class_defines}}
    {{#class_field_defines}}
    if(!json_context["{{class_field_display_name}}"].is_null()){
        {{#class_field_is_vector}}assert(json_context["{{class_field_display_name}}"].is_array());
        Json::array array_{{class_field_name}} = json_context["{{class_field_display_name}}"].array_items();
        instance.{{class_field_name}}.resize(array_{{class_field_name}}.size());
        for (size_t index=0; index < array_{{class_field_name}}.size();++index){
            Serializer::read(array_{{class_field_name}}[index], instance.{{class_field_name}}[index]);
        }{{/class_field_is_vector}}
        {{#class_field_is_map}}assert(json_context["{{class_field_display_name}}"].is_array());
        Json::array array_{{class_field_name}} = json_context["{{class_field_display_name}}"].array_items();
        for (size_t index=0; index < array_{{class_field_name}}.size()/2;++index){
            decltype(instance.{{class_field_name}})::value_type _pairtype;
		    decltype(_pairtype)::first_type _key{};
		    decltype(_pairtype)::second_type _value{};
            instance.{{class_field_name}}.insert({Serializer::read(array_{{class_field_name}}[index*2], _key), Serializer::read(array_{{class_field_name}}[index*2+1], _value)});
        }{{/class_field_is_map}}
        {{^class_field_is_vector}}{{^class_field_is_map}}Serializer::read(json_context["{{class_field_display_name}}"], instance.{{class_field_name}});{{/class_field_is_map}}{{/class_field_is_vector}}
    }{{/class_field_defines}}
    return instance;
}{{/class_defines}}

NS_JYE_END
